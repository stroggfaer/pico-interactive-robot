# command_ai.py
import serial
import time
import json
import requests
import random
import re
import pyttsx3
import speech_recognition as sr

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS
engine = pyttsx3.init()
voices = engine.getProperty('voices')
for voice in voices:
    if 'russian' in voice.name.lower() or 'irina' in voice.name.lower():
        engine.setProperty('voice', voice.id)
        break
engine.setProperty('rate', 190)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
recognizer = sr.Recognizer()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Serial
ser = serial.Serial('COM5', 115200, timeout=1)  # –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ—Ä—Ç
time.sleep(2)

OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
OPENROUTER_API_KEY = "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"  

MODEL_NAME = "nousresearch/deephermes-3-mistral-24b-preview:free"

EMOTIONS = [
    "neutral", "angry_talking", "smile", "smile_love",
    "embarrassed", "scary", "happy", "sad",
    "surprise", "happy_circle", "talking"
]

TALKING_EMOTIONS = ["talking"]
FINAL_EMOTIONS = ["neutral"]

def detect_emotion_simple(text):
    if not text:
        return "neutral"
        
    text_lower = text.lower()
    
    # –°–ª–æ–≤–∞—Ä—å —ç–º–æ—Ü–∏–π –∏ –∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    emotion_triggers = {
        "smile": ["—Ö–∞", "–∞—Ö–∞—Ö", "–ª–æ–ª", "—Å–º–µ—à–Ω–æ", "–≤–µ—Å–µ–ª–æ", "–∑–∞–±–∞–≤–Ω–æ", "—Ö–µ—Ö–µ"],
        "smile_love": ["–ª—é–±–ª—é", "–æ–±–æ–∂–∞—é", "–º–∏–ª–∞—è", "‚ù§Ô∏è", "‚ô•Ô∏è", "–º–∏–ª—ã–π", "–ø—Ä–µ–ª–µ—Å—Ç—å", "–∫—Ä–∞—Å–æ—Ç–∞"],
        "scary": ["–±–æ—é—Å—å", "—Å—Ç—Ä–∞—à–Ω–æ", "—É–∂–∞—Å", "–∂—É—Ç–∫–æ", "–∫–æ—à–º–∞—Ä", "–ø–∞–Ω–∏–∫–∞"],
        "sad": ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–µ—á–∞–ª—å–Ω–æ", "–∂–∞–ª—å", "—Ç–æ—Å–∫–∞", "–≥—Ä—É—Å—Ç—å", "–ø–µ—á–∞–ª—å", "–ø–ª–æ—Ö–æ"],
        "surprise": ["—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ", "–æ–≥–æ", "–≤–∞—É", "–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ", "–ø–æ—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ", "–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ", "!"],
        "embarrassed": ["—Å—Ç—ã–¥–Ω–æ", "—Å–º—É—â–∞—é—Å—å", "–Ω–µ–ª–æ–≤–∫–æ", "–∏–∑–≤–∏–Ω–∏", "–ø—Ä–æ—Å—Ç–∏", "—Å—Ç–µ—Å–Ω—è—é—Å—å"],
        "angry_talking": ["–∑–ª–æ–π", "–∑–ª–æ—Å—Ç—å", "—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç", "–±–µ—Å–∏—Ç", "–Ω–µ–Ω–∞–≤–∏–∂—É", "–≥–Ω–µ–≤"],
        "happy": ["—Ä–∞–¥–æ—Å—Ç—å", "—Å—á–∞—Å—Ç—å–µ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "—Å—É–ø–µ—Ä", "–æ—Ç–ª–∏—á–Ω–æ", "–∫–ª–∞—Å—Å", "–∫—Ä—É—Ç–æ"]
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if "?" in text:
        # –ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –µ—Å—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —ç–º–æ—Ü–∏—é
        for emotion, triggers in emotion_triggers.items():
            if any(trigger in text_lower for trigger in triggers):
                return emotion
        return "talking"  # –ï—Å–ª–∏ –Ω–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π talking

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if "!" in text:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        for emotion, triggers in emotion_triggers.items():
            if any(trigger in text_lower for trigger in triggers):
                return emotion
        return "happy"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    max_triggers = 0
    detected_emotion = "neutral"
    
    for emotion, triggers in emotion_triggers.items():
        trigger_count = sum(1 for trigger in triggers if trigger in text_lower)
        if trigger_count > max_triggers:
            max_triggers = trigger_count
            detected_emotion = emotion
    
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç—Ä–∏–≥–≥–µ—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —ç–º–æ—Ü–∏—é
    if max_triggers > 0:
        return detected_emotion
        
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –Ω–æ –Ω–µ—Ç —è–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
    if text.strip():
        return "talking"
        
    return "neutral"

def get_emotion_from_context(text):
    emotion = detect_emotion_simple(text)

    prompt = f"""
–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç —Å —ç–º–æ—Ü–∏–µ–π: {emotion}.
–û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –≤ —ç—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏.
–§—Ä–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{text}"

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:
{{
    "emotion": "{emotion}",
    "text": "—Ç–≤–æ–π –æ—Ç–≤–µ—Ç –∑–¥–µ—Å—å"
}}

–í–∞–∂–Ω–æ: –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON.
"""

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": MODEL_NAME,
        "messages": [
            {"role": "user", "content": prompt}
        ]
    }

    try:
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload)
        response.raise_for_status()
        message = response.json()["choices"][0]["message"]["content"]
        print(f"ü§ñ AI response: {message}")
        match = re.search(r'\{.*?\}', message, re.DOTALL)
        if match:
            emotion_data = json.loads(match.group())
            if "text" in emotion_data:
                result = {"emotion": emotion, "text": emotion_data["text"]}
                print(f"‚ú® Final response: {result}")
                return result
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {e}")

    return {"emotion": emotion, "text": "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å!"}

def speak(text, ser, emotion):
    speech_duration = len(text) / 10.0 + 0.1
    command = {
        "emotion": emotion if emotion in TALKING_EMOTIONS else "talking",
        "duration": speech_duration,
        "intensity": 1.0,
        "volume": 1.25,
        "text": text,
        "anim_duration": 5,
        "mouth_speed": max(0.1, min(0.5, 0.1 + (len(text) / 50)))
    }
    command_json = json.dumps(command) + "\r\n"
    ser.write(command_json.encode('utf-8'))
    time.sleep(0.1)

    try:
        engine.say(text)
        engine.runAndWait()
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏: {e}")

def recognize_speech():
    try:
        with sr.Microphone() as source:
            print("üéôÔ∏è –ì–æ–≤–æ—Ä–∏ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω...")
            recognizer.adjust_for_ambient_noise(source, duration=1)
            audio = recognizer.listen(source, timeout=6, phrase_time_limit=5)
            text = recognizer.recognize_google(audio, language='ru-RU')
            print(f"üü¢ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
            return text
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")
        return ""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–µ–Ω–∏—è
initial = ser.readline().decode('utf-8').strip()
print(f"Initial: {initial}")
ser.write((json.dumps({"emotion": "neutral", "duration": 2.0, "intensity": 1.0, "volume": 0.3}) + "\r\n").encode('utf-8'))

input_choice = input("üéôÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω? (–¥–∞/–Ω–µ—Ç): ").lower()
use_mic = input_choice == "–¥–∞"

while True:
    if use_mic:
        user_input = recognize_speech()
    else:
        user_input = input("> ")

    if user_input.lower() == "q":
        break
    if not user_input:
        continue

    emotion_data = get_emotion_from_context(user_input)
    emotion = emotion_data["emotion"]
    llama_response = emotion_data["text"]

    print(f"\nüü¢ –≠–º–æ—Ü–∏—è: {emotion}")
    print(f"üü¢ –û—Ç–≤–µ—Ç: {llama_response}")

    if llama_response:
        speak(llama_response, ser, emotion)
        final_emotion = random.choice(FINAL_EMOTIONS)
        ser.write((json.dumps({"emotion": final_emotion, "duration": 2.0, "intensity": 1.0, "volume": 0.2}) + "\r\n").encode('utf-8'))
    else:
        ser.write((json.dumps({"emotion": emotion, "duration": 2.0, "intensity": 1.0, "volume": 1.22}) + "\r\n").encode('utf-8'))

    response = ser.readline().decode('utf-8').strip()
    print(f"Response: {response}")

ser.close()
print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
